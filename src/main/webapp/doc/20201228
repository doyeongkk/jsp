1-2교시
System.out.println 앞으로 사용 금지
**why??
파일에 로그를 남기거나 콘솔에 로그를 남길경우 하나의 프린트 내용이 완전히 프린트 되거나 저장되기 전까지 다음 프린트 부분은 
대기할 수 밖에 없게 된다. 결국 어플리케이션 전체에 대기시간이 발생하게 된다.
즉, 서비스 자체에 큰 영향을 주기 때문이다.

logging 사용 이유: 개발시 의도한대로 동작하고 있는지 검사 
ex) 웹브라우저를 통해 server로 요청(local host/basicServlet)
    doGet메소드가 호출이 되었는지 로그를 통해 확인

    파라미터가 의도한대로 서블릿으로 전달이 되었는지 확인 

logging과 비슷한 목적으로 사용하는 것: 디버깅(조금 더 detail함)

**log level설정에 따른 logger 메소드 동작여부
debug 레벨로 설정했다면 debug 위의 레벨들의 logger메소드들이 다 동작이 가능

** 로깅 문자열 결함을 피하기 위한 방법
if(설정로그레벨 <= debug) {
    	   logger.debug("basicServlet.doGet() userId parameter :" + req.getParameter("userId"));
      // }
 // 지금은 중괄호로 극복함
    	   logger.debug("basicServlet.doGet() userId parameter : {} {}", 
    			                   req.getParameter("userId"),  req.getParameter("password")); 

** 문자열 결합은 왜 피해야 하는가?
: 파라미터 생성 비용 (어떤 변수를 string으로 변환하고 다른 string과 연결)이 들지 않게 하기 위해 
(이런 이유 때문에 서버에 과부하 걸릴 수 있음) 


=============================================================
3교시 
servlet: java에 html 코드를 삽입
         하면서 생기는 문제점
          1. html 코드들이 문자 취급되기 때문에 오타를 발견 하기가 어려움
          2. 협업의 문제점
             java - 프로그래머
             html - 디자이너 
          3. 개발자가 코드를 리딩하는데 가독성의 문제
          ==> jsp의 탄생 배경 
              
             
jsp: html코드에 java 코드를 삽입

1. jsp는 servlet으로 변환되어 서비스 된다.
2. servlet-container(tomcat)이 jsp를 서블릿으로 변환하는 과정에서
   사용하는 폴더는 work 폴더
   . tomcat도 개발자가 만든 프로그램으로 비정상적으로 동작할 때가 있음
   . 개발자가 jsp파일을 수정하였음에도 수정 내역이 반영되지 않을 경우
     work 폴더에 생성된 jsp변환 파일들(java, class)을 삭제 해주면 새롭게 만들어 준다. 
3. jsp를 서블릿으로 변환하는 시기는 해당 jsp에 대해 최초 요청이 일어 났을 경우에 변환
   . 서블릿으로 생성이 된 이후 같은 파일에 대한 요청은 이미 변환된 파일로 서비스
 
지시자
스크립틀릿: java코드 기술 ==> JSTL
표현식: 출력 ==> EL
주석
선언부: 변수, 메소드 선언 ==> VIEW와는 크게 관련이 없는 부분(잘 사용하지X)



   
        
