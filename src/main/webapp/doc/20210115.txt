model1 : 요청을 jsp가 접수, 응답도 jsp에서 생성
	     비지니스 로직(model)이 jsp(view)안에서 호출됨
	     만약 다른 jsp(view)에서도 동일한 비지니스 로직(model)을 사용할 경우
	     비지니스 로직의 변경시 많은 코드 수정이 동반된다. -> 유지 보수의 어려움
	     
model2: 모델1과 달리 웹브라우저 사용자의 요청을 서블릿이 받는다. 
서블릿은 웹브라우저의 요청을 받아 View로 보여줄것인지 Model로 보내줄것인지 정하여 전송해준다.
여기서 View페이지는 사용자에게 보여주는 역할만 담당하고 실질적인 기능의 부분은 Model에서 담당한다.
모델2 방식의 경우 실질적으로 보여지는 HTML과 JAVA 소스를 분리해 놓았기 때문에 모델1방식에 비해 
개발을 확장시키기도 쉽고유지보수하기도 쉽다.(코딩을 좀 더 깔끔하게 할 수 있다.)


MVC 패턴: Model - View - Controller
		각 역할을 담당하는 객체를 분리
		controller : 요청을 접수, 비지니스 로직을 호출 및 저장(scope)
		Model : 비지니스 로직 처리
		View: 화면 출력을 담당
		
		model1과 다르게 view와 model을 분리
		view에서 필요한 데이터는 scope 객체를 통해 받는다
		
Front Controller: 모든 요청을 하나의 객체가 접수 받는 형태
			      클라이언트의 다양한 요청들을 한곳으로 집중시켜서 개발 및 유지보수에 효율성을 극대화 시키는 패턴이다.
				  이를통해 해당하는 각각의 다양한 요청들에 따라 요청에 맞는 서블릿을 향하게 했는데 한곳으로 서블릿을 모아서 관리하는 것을 말한다.
				  장점: 모든 요청에 대해 항상 수행해야 하는 작업을 한 곳에서 수행할 수 있다.
				  URL을 더 의미 있게 제공할 수 있다.
				  파일 구조가 바뀌어도 URL을 유지할 수 있다.
				  보안성이 강화된다. Test관리하기가 편해 진다. 
				  
								
